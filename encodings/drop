newBlock(R,C,V,S) | noNewBlock(R,C,V,S) :- block(R,C,V,S,_).

%-----CONSTRAINT---------

:- #count{R,C : newBlock(R,C,_,_)} != 1.
:- newBlock(_,_,_,S), noNewBlock(_,_,_,S1), S > S1.

%Puo' scegliere la riga con valore 0 solo se sta per fare un match
:- newBlock(0,C,V,_), block(0,C,V,_,"false").

%------WEAK------------

%Se il tipo di match di tutti i blocchi e' false quindi non ci sono accoppiate preferisci posizioni piu' alla base
match(1) :- block(R,C,_,_,"true").
:~ not match(1) , newBlock(R,_,_,_) , P = 5 - R. [P@1]

%Se c'e' un match preferisci quello alla base
:~ match(1) , newBlock(R,_,_,_) , P = 5 - R. [P@1]

%Preferibile non posizionare un blocco nuovo sopra un altro di valore inferiore
:~ newBlock(R,C,V,_) , not match(1), existingBlock(R1,C,V1) , R1 = R + 1 , V > V1 , V2 = V + V1. [V@2]

:~ newBlock(R,C,V,_) , not match(1), existingBlock(R1,C,V1) , R1 = R + 1 , V1 > V , V2 = V1 - V. [V2@1]

%Preferibile posizionare un nuovo blocco sopra un altro ma tra tutti preferire quello con la differenza di valore minore
%:~ newBlock(R,C,V,_) , not match(1), existingBlock(R1,C,V1) , R1 = R + 1 , V2 = V1 - V. [V2@2]